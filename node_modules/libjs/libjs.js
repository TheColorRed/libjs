var libjs;
(function (libjs) {
    class component {
        constructor() {
            this._elements = [];
        }
        get htmlElements() {
            return this._elements;
        }
        set elements(items) {
            for (let el of items) {
                this._elements.push(el);
            }
        }
        addElement(selector) {
            let elements = document.querySelectorAll(selector);
            for (let element of elements) {
                this._elements.push(element);
                this.initElement(element);
            }
        }
        init() {
            if (typeof document !== 'undefined') {
                this._elements.forEach(el => {
                    this.initElement(el);
                });
            }
        }
        initElement(el) {
            this.initKeyboardEvents(el);
            this.initMouseEvents(el);
            this.initFormEvents(el);
        }
        initKeyboardEvents(el) {
            typeof this['keyup'] == 'function' && el.addEventListener('keyup', (e) => { this['keyup'](this, e.currentTarget, e); });
            typeof this['keydown'] == 'function' && el.addEventListener('keydown', (e) => { this['keydown'](this, e.currentTarget, e); });
            typeof this['keypress'] == 'function' && el.addEventListener('keypress', (e) => { this['keypress'](this, e.currentTarget, e); });
        }
        initMouseEvents(el) {
            typeof this['click'] == 'function' && el.addEventListener('click', (e) => { this['click'](this, e); });
            typeof this['dblclick'] == 'function' && el.addEventListener('dblclick', (e) => { this['dblclick'](this, e); });
            typeof this['contextmenu'] == 'function' && el.addEventListener('contextmenu', (e) => { this['contextmenu'](this, e); });
            typeof this['mousedown'] == 'function' && el.addEventListener('mousedown', (e) => { this['mousedown'](this, e); });
            typeof this['mouseup'] == 'function' && el.addEventListener('mouseup', (e) => { this['mouseup'](this, e); });
            typeof this['mouseenter'] == 'function' && el.addEventListener('mouseenter', (e) => { this['mouseenter'](this, e); });
            typeof this['mouseleave'] == 'function' && el.addEventListener('mouseleave', (e) => { this['mouseleave'](this, e); });
            typeof this['mousemove'] == 'function' && el.addEventListener('mousemove', (e) => { this['mousemove'](this, e); });
            typeof this['mouseover'] == 'function' && el.addEventListener('mouseover', (e) => { this['mouseover'](this, e); });
            typeof this['mouseout'] == 'function' && el.addEventListener('mouseout', (e) => { this['mouseout'](this, e); });
        }
        initFormEvents(el) {
            typeof this['blur'] == 'function' && el.addEventListener('blur', e => { this['blur'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['focus'] == 'function' && el.addEventListener('focus', e => { this['focus'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['focusin'] == 'function' && el.addEventListener('focusin', e => { this['focusin'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['focusout'] == 'function' && el.addEventListener('focusout', e => { this['focusout'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['change'] == 'function' && el.addEventListener('change', e => { this['change'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['input'] == 'function' && el.addEventListener('input', e => { this['input'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['invalid'] == 'function' && el.addEventListener('invalid', e => { this['invalid'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['reset'] == 'function' && el.addEventListener('reset', e => { this['reset'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['search'] == 'function' && el.addEventListener('search', e => { this['search'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['select'] == 'function' && el.addEventListener('select', e => { this['select'](this, e.currentTarget.value, e.currentTarget); });
            typeof this['submit'] == 'function' && el.addEventListener('submit', e => { this['submit'](this, e.currentTarget.value, e.currentTarget); });
        }
    }
    libjs.component = component;
})(libjs || (libjs = {}));
var libjs;
(function (libjs) {
    function string(str) {
        return new strings(str);
    }
    libjs.string = string;
    class strings {
        constructor(str) {
            this._string = str.toString();
        }
        toString() {
            return this._string;
        }
        toNumber() {
            this._string = this._string
                .replace(/[^0-9-.]/g, '')
                .replace(/(?!^)-/g, '')
                .replace(/(\..*)\.$/, '$1')
                .replace(/\.(?=.*\.)/g, '');
            return this;
        }
        commaSeparate() {
            this._string = this._string.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            return this;
        }
        format(format) {
            let str = '';
            let f = 0, n = 0;
            while (f < format.length && n < this._string.length) {
                let fmt = format[f], num = this._string[n];
                if (fmt == '#') {
                    str += num ? num : '';
                    n++, f++;
                }
                else {
                    str += fmt ? fmt : '';
                    f++;
                }
            }
            this._string = str;
        }
    }
    libjs.strings = strings;
})(libjs || (libjs = {}));
var libjs;
(function (libjs) {
    function collect(data) {
        return new collection(data);
    }
    libjs.collect = collect;
    var pad;
    (function (pad) {
        pad[pad["before"] = 0] = "before";
        pad[pad["after"] = 1] = "after";
    })(pad = libjs.pad || (libjs.pad = {}));
    class collectionConstructor {
    }
    libjs.collectionConstructor = collectionConstructor;
    class collection extends collectionConstructor {
        constructor(data) {
            super();
            this._items = [];
            this._pointer = 0;
            if (!data) {
                return;
            }
            if (Array.isArray(data)) {
                this._items = data;
            }
            else {
                this._items.push(data);
            }
        }
        get length() {
            return this._items.length;
        }
        [Symbol.iterator]() {
            let items = this._items;
            let pointer = 0;
            return {
                next() {
                    if (pointer < items.length) {
                        return { done: false, value: items[pointer++] };
                    }
                    return { done: true, value: items[items.length - 1] };
                }
            };
        }
        index(index) {
            return this._items[index];
        }
        set(items) {
            this._items = items;
            return this;
        }
        remove(item) {
            let idx = this._items.indexOf(item);
            if (idx > -1)
                this._items.splice(idx, 1);
            return this;
        }
        each(callback) {
            let c = new collection();
            this._items.forEach((i, index) => c.append(callback(i, index)));
            return c;
        }
        passes(callback) {
            for (let i = 0, l = this.length; i < l; i++) {
                if (!callback(this._items[i], i))
                    return false;
            }
            return true;
        }
        fails(callback) {
            for (let i = 0, l = this.length; i < l; i++) {
                if (!callback(this._items[i], i))
                    return true;
            }
            return false;
        }
        toArray() {
            return this._items;
        }
        append(...vals) {
            this._items = this._items.concat(vals);
            return this;
        }
        prepend(...vals) {
            this._items = vals.concat(this._items);
            return this;
        }
        first() {
            return this._items[0];
        }
        last() {
            return this._items[this.length - 1];
        }
        get(...vals) {
            if (vals.length == 0) {
                return this;
            }
            let r = new collection();
            vals.forEach(i => r.append(this._items[i]));
            return r;
        }
        pad(length, value = null, side = pad.after) {
            let r = new collection();
            r.set(this._items);
            if (r.length >= length)
                return r;
            for (let i = 0, l = length - r.length; i < l; i++) {
                side == pad.after ? r.append(value) : r.prepend(value);
            }
            return r;
        }
        contains(value) {
            for (let i of this._items) {
                if (i == value)
                    return true;
            }
            return false;
        }
        pluck(key) {
            let r = new collection();
            this.each(i => i[key] && r.append(i[key]));
            return r;
        }
        unique() {
            let r = new collection();
            for (let i of this._items) {
                if (!r.contains(i)) {
                    r.append(i);
                }
            }
            return r;
        }
        take(amount) {
            let r = new collection(), c = 0;
            for (let i of this._items) {
                r.append(i), c++;
                if (c == amount)
                    break;
            }
            return r;
        }
        skip(amount) {
            let r = new collection(), c = 0;
            for (let i of this._items) {
                if (c < amount) {
                    c++;
                    continue;
                }
                r.append(i), c++;
            }
            return r;
        }
        takeWhile(callback) {
            let r = new collection();
            for (let i = 0, l = this._items.length; i < l; i++) {
                let item = this.index(i);
                if (callback(item, i)) {
                    r.append(item);
                }
            }
            return r;
        }
        skipWhile(callback) {
            let r = new collection();
            for (let i = 0, l = this._items.length; i < l; i++) {
                let item = this.index(i);
                if (!callback(item, i)) {
                    r.append(item);
                }
            }
            return r;
        }
        zip(items, callback) {
            let length = items.length > this._items.length ? items.length : this._items.length;
            let r = new collection();
            for (let i = 0; i < length; i++) {
                r.append(callback(this.index(i), items.index(i)));
            }
            return r;
        }
        average(key) {
            let c = 0, t = 0;
            if (!key) {
                this._items.forEach(n => { typeof n == 'number' ? t += n : null, c++; });
            }
            else {
                this._items.forEach(o => { if (o[key]) {
                    t += o[key], c++;
                } });
            }
            return t / c;
        }
        min(key) {
            let min = null;
            if (!key) {
                this._items.forEach(n => min = (!min || n < min) ? n : min);
            }
            else {
                this._items.forEach(o => { if (o[key]) {
                    min = !min || o[key] < min ? o[key] : min;
                } });
            }
            return min;
        }
        max(key) {
            let max = 0;
            if (!key) {
                this._items.forEach(n => max = ((!max || (typeof n == 'number' && n > max)) ? n : max));
            }
            else {
                this._items.forEach(o => { if (o[key]) {
                    max = !max || o[key] > max ? o[key] : max;
                } });
            }
            return max;
        }
    }
    libjs.collection = collection;
})(libjs || (libjs = {}));
var libjs;
(function (libjs) {
    class query {
        constructor(data) {
            this._where = [];
            if (data) {
                this.data = data;
            }
        }
        static fromJson(data) {
            return new query(JSON.parse(data));
        }
        set data(data) {
            this._results = new libjs.collection(data);
        }
        get length() {
            return this._results.length;
        }
        where(key, arg1, arg2, arg3) {
            if (arguments.length == 2) {
                this._where.push({ key: key, expression: '=', value1: arg1 });
            }
            else if (arguments.length == 3) {
                this._where.push({ key: key, expression: arg1, value1: arg2 });
            }
            else if (arguments.length == 4) {
                this._where.push({ key: key, expression: arg1, value1: arg2, value2: arg3 });
            }
            return this;
        }
        whereType(key, expression) {
            this._where.push({ key: key, expression: expression });
            return this;
        }
        get() {
            return this._processWhere();
        }
        _processWhere() {
            let final = this._results;
            this._where.forEach(w => {
                let r = [];
                final.each(i => {
                    switch (w.expression.toLowerCase()) {
                        case '=':
                            if (i[w.key] == w.value1) {
                                r.push(i);
                            }
                            break;
                        case '!=':
                            if (i[w.key] != w.value1) {
                                r.push(i);
                            }
                            break;
                        case '<':
                            if (i[w.key] < w.value1) {
                                r.push(i);
                            }
                            break;
                        case '>':
                            if (i[w.key] > w.value1) {
                                r.push(i);
                            }
                            break;
                        case '>=':
                            if (i[w.key] >= w.value1) {
                                r.push(i);
                            }
                            break;
                        case '<=':
                            if (i[w.key] <= w.value1) {
                                r.push(i);
                            }
                            break;
                        case '%':
                            if (i[w.key] % w.value1 == 0) {
                                r.push(i);
                            }
                            break;
                        case '><':
                            if (i[w.key] > w.value1 && i[w.key] < w.value2) {
                                r.push(i);
                            }
                            break;
                        case '=><=':
                            if (i[w.key] >= w.value1 && i[w.key] <= w.value2) {
                                r.push(i);
                            }
                            break;
                        case '<>':
                            if (i[w.key] < w.value1 || i[w.key] > w.value2) {
                                r.push(i);
                            }
                            break;
                        case '=<>=':
                            if (i[w.key] <= w.value1 || i[w.key] >= w.value2) {
                                r.push(i);
                            }
                            break;
                        case 'null':
                            if (i[w.key] === null) {
                                r.push(i);
                            }
                            break;
                        case '!null':
                            if (i[w.key] !== null) {
                                r.push(i);
                            }
                            break;
                        case 'undefined':
                            if (i[w.key] === undefined) {
                                r.push(i);
                            }
                            break;
                        case '!undefined':
                            if (i[w.key] !== undefined) {
                                r.push(i);
                            }
                            break;
                        case 'number':
                            if (typeof i[w.key] == 'number') {
                                r.push(i);
                            }
                            break;
                        case '!number':
                            if (typeof i[w.key] != 'number') {
                                r.push(i);
                            }
                            break;
                        case 'string':
                            if (typeof i[w.key] == 'string') {
                                r.push(i);
                            }
                            break;
                        case '!string':
                            if (typeof i[w.key] != 'string') {
                                r.push(i);
                            }
                            break;
                        case 'date':
                            if (i[w.key] instanceof Date) {
                                r.push(i);
                            }
                            break;
                        case '!date':
                            if (!(i[w.key] instanceof Date)) {
                                r.push(i);
                            }
                            break;
                        case 'array':
                            if (i[w.key] instanceof Array) {
                                r.push(i);
                            }
                            break;
                        case '!array':
                            if (!(i[w.key] instanceof Array)) {
                                r.push(i);
                            }
                            break;
                        case 'object':
                            if (i[w.key] instanceof Object) {
                                r.push(i);
                            }
                            break;
                        case '!object':
                            if (!(i[w.key] instanceof Object)) {
                                r.push(i);
                            }
                            break;
                    }
                });
                final.set(r);
            });
            return final;
        }
    }
    libjs.query = query;
})(libjs || (libjs = {}));
var libjs;
(function (libjs) {
    const components = [];
    function register(comp) {
        let c = new comp;
        createComponent(c);
        return c;
    }
    libjs.register = register;
    function domReady() {
        components.forEach(comp => typeof comp['domReady'] == 'function' && comp['domReady']());
        return this;
    }
    libjs.domReady = domReady;
    function createComponent(comp) {
        components.push(comp);
        typeof comp['created'] == 'function' && comp['created']();
        comp.init();
        return this;
    }
})(libjs || (libjs = {}));
if (typeof module !== 'undefined' && module.exports) {
    module.exports = libjs;
}
else {
    window.libjs = libjs;
    document.addEventListener('DOMContentLoaded', e => libjs.domReady());
}
