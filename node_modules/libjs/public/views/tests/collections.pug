extends ../wrapper
block content
  style.
    .btn.action {
      margin-right: 5px;
      margin-bottom: 5px;
    }
    .fixed{
      position: fixed;
    }
  .container
    .row
      .col-sm-12
        h1 Collections
    hr
    .row
      .col-sm-6
        h2 Perform an action
        .row
          .col-lg-12
            button.btn.action(action='length') Get the number of items
            pre: code.language-js
              ='collection.length'
        .row
          .col-lg-12
            hr
            button.btn.action(action='min') Get minimum value
            pre: code.language-js
              ='collection.min()'
        .row
          .col-lg-12
            hr
            button.btn.action(action='max') Get maximum value
            pre: code.language-js
              ='collection.max()'
        .row
          .col-lg-12
            hr
            button.btn.action(action='first') Get the first item
            pre: code.language-js
              ='collection.first()'
        .row
          .col-lg-12
            hr
            button.btn.action(action='last') Get the last item
            pre: code.language-js
              ='collection.last()'
        .row
          .col-lg-12
            hr
            button.btn.action(action='contains123') Contains 123
            pre: code.language-js
              ='collection.contains(123)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='contains147') Contains 147
            pre: code.language-js
              ='collection.contains(147)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='take') Take 2 items
            pre: code.language-js
              ='collection.take(2)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='take-while') Take while item < 500
            pre: code.language-js
              ='collection.takeWhile(i => i < 500)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='skip-while') Skip while item < 500
            pre: code.language-js
              ='collection.skipWhile(i => i < 500)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='skip') Skip the first 5 items
            pre: code.language-js
              ='collection.skip(5)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='unique') Make collection unique
            pre: code.language-js
              ='collection.unique()'
        .row
          .col-lg-12
            hr
            button.btn.action(action='pad-before') Pad the collection to 20 items before
            pre: code.language-js
              ='collection.pad(20, 0, libjs.pad.before)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='pad-after') Pad the collection to 20 items after
            pre: code.language-js
              ='collection.pad(20, 0, libjs.pad.after)'
        .row
          .col-lg-12
            hr
            button.btn.action(action='zip') Zip the items
            pre: code.language-js
              ="let fruit = libjs.collect(['apples','oranges','grapes','pineapple','kiwi','star fruit','pears','peaches'])\n"
              ="collection.zip(fruit, (first, second) => first + ' ' + second + ' in the basket')"
        .row
          .col-lg-12
            hr
            button.btn.action(action='each') For each item
            pre: code.language-js
              ="collection.each((value, index) => 'index=' + index + '; value=' + value)"
      .col-sm-6.col-sm-offset-4.fixed
        .row
          .col-sm-6
            h2 Set the json data
            textarea.form-control#data [123,456,789,986,257,18,256,8277,222,888,666]
        .row
          .col-lg-6
            h4#time
        h2.row
          .col-lg-3 See the results
          .col-lg-1
            input(value='100' min='0').number.text-center.form-control#max-items
        .row
          .col-sm-6#results(style='height:65vh;overflow:auto;')
  script.
    libjs.register(
      class Test extends libjs.component {
        domReady() {
          console.log(document)
        }
        created() {
          console.log('Test created')
        }
      }
    )
    let actions = document.querySelectorAll('.action')
    function display(collection, max = 30) {
      let result = document.querySelector('#results')
      result.innerHTML = ''
      if(collection instanceof libjs.collection){
        let c = 0
        for(let i of collection) {
          result.innerHTML += i + '<br>';
          c++
          if(c == max) break
        }
      } else {
        result.innerHTML += collection + '<br>'
      }
    }
    for(let act of actions){
      act.addEventListener('click', e => {
        let data = JSON.parse(document.querySelector('#data').value)
        let action = e.currentTarget.getAttribute('action').toLowerCase()
        let dspl = ''
        let start = new Date().getTime()
        let collection = libjs.collect(data)
        switch(action){
          case 'min':
            dspl = collection.min()
            break
          case 'max':
            dspl = collection.max()
            break
          case 'first':
            dspl = collection.first()
            break
          case 'last':
            dspl = collection.last()
            break
          case 'contains147':
            dspl = collection.contains(147)
            break
          case 'contains123':
            dspl = collection.contains(123)
            break
          case 'take':
            dspl = collection.take(2)
            break
          case 'take-while':
            dspl = collection.takeWhile(i => i < 500)
            break
          case 'skip-while':
            dspl = collection.skipWhile(i => i < 500)
            break
          case 'skip':
            dspl = collection.skip(5)
            break
          case 'unique':
            dspl = collection.unique()
            break
          case 'pad-before':
            dspl = collection.pad(20, 0, libjs.pad.before)
            break
          case 'pad-after':
            dspl = collection.pad(20, 0, libjs.pad.after)
            break
          case 'zip':
            let fruit = libjs.collect(['apples','oranges','grapes','pineapple','kiwi','star fruit','pears','peaches'])
            let items = collection.zip(fruit, (first, second) => first + ' ' + second + ' in the basket')
            dspl = items
            break
          case 'each':
            dspl = collection.each((value, index) => 'index=' + index + '; value=' + value)
            break
          case 'length':
            dspl = collection.length
            break
        }
        let end = new Date().getTime()
        document.querySelector('#time').textContent = end - start + ' milliseconds to execute on ' + libjs.string(collection.length).commaSeparate().toString() + ' items'
        console.log(start, end, end - start)
        display(dspl, document.querySelector('#max-items').value)
      })
    }

