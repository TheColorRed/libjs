namespace libjs {

  declare var module: any

  export interface componentType<T extends component> { new (): T; }

  const components: component[] = []

  /**
   * Registers a new component
   *
   * @export
   * @param {componentType<component>} item
   * @returns
   */
  export function register(comp: componentType<component>) {
    let c = new comp
    createComponent(c)
    return c
  }

  /**
   * Once the dom is ready execute 'domReady' on each component
   *
   * @export
   * @returns
   */
  export function domReady() {
    components.forEach(comp => typeof comp['domReady'] == 'function' && comp['domReady']())
    return this
  }

  /**
   * Creates a new component and executes 'created' on the component
   *
   * @param {component} comp
   * @returns
   */
  function createComponent(comp: component) {
    components.push(comp)
    typeof comp['created'] == 'function' && comp['created']()
    comp.init()
    return this
  }
}