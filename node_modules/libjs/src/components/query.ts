namespace libjs {

  interface where {
    key: string,
    expression: string,
    value1?: any,
    value2?: any
  }

  export class query<T> {
    private _results: collection<T>

    private _where: where[] = []

    public constructor(data: any) {
      if (data) { this.data = data }
    }

    public static fromJson(data: string) {
      return new query<Object>(JSON.parse(data))
    }

    public set data(data: any) {
      this._results = new collection<T>(data)
    }

    public get length(): number {
      return this._results.length
    }

    public where(key: string, arg1, arg2, arg3): this {
      if (arguments.length == 2) {
        this._where.push({ key: key, expression: '=', value1: arg1 })
      } else if (arguments.length == 3) {
        this._where.push({ key: key, expression: arg1, value1: arg2 })
      } else if (arguments.length == 4) {
        this._where.push({ key: key, expression: arg1, value1: arg2, value2: arg3 })
      }
      return this
    }

    public whereType(key: string, expression: string): this {
      this._where.push({ key: key, expression: expression })
      return this
    }

    public get(): collection<T> {
      return this._processWhere()
    }

    private _processWhere(): collection<T> {
      let final = this._results
      this._where.forEach(w => {
        let r = []
        final.each(i => {
          switch (w.expression.toLowerCase()) {
            // Is equal
            case '=': if (i[w.key] == w.value1) { r.push(i) } break
            // Is not equal
            case '!=': if (i[w.key] != w.value1) { r.push(i) } break
            // Is less than
            case '<': if (i[w.key] < w.value1) { r.push(i) } break
            // Is greater than
            case '>': if (i[w.key] > w.value1) { r.push(i) } break
            // Is greater than or equal
            case '>=': if (i[w.key] >= w.value1) { r.push(i) } break
            // Is less than or equal
            case '<=': if (i[w.key] <= w.value1) { r.push(i) } break
            // Is mod
            case '%': if (i[w.key] % w.value1 == 0) { r.push(i) } break
            // Is between exclusive
            case '><': if (i[w.key] > w.value1 && i[w.key] < w.value2) { r.push(i) } break
            // Is between inclusive
            case '=><=': if (i[w.key] >= w.value1 && i[w.key] <= w.value2) { r.push(i) } break
            // Is not between exclusive
            case '<>': if (i[w.key] < w.value1 || i[w.key] > w.value2) { r.push(i) } break
            // Is not between inclusive
            case '=<>=': if (i[w.key] <= w.value1 || i[w.key] >= w.value2) { r.push(i) } break
            // Is null
            case 'null': if (i[w.key] === null) { r.push(i) } break
            // Is not null
            case '!null': if (i[w.key] !== null) { r.push(i) } break
            // Is undefined
            case 'undefined': if (i[w.key] === undefined) { r.push(i) } break
            // Is not undefined
            case '!undefined': if (i[w.key] !== undefined) { r.push(i) } break
            // Is a number
            case 'number': if (typeof i[w.key] == 'number') { r.push(i) } break
            // Is not a number
            case '!number': if (typeof i[w.key] != 'number') { r.push(i) } break
            // Is a string
            case 'string': if (typeof i[w.key] == 'string') { r.push(i) } break
            // Is not a string
            case '!string': if (typeof i[w.key] != 'string') { r.push(i) } break
            // Is a date
            case 'date': if (i[w.key] instanceof Date) { r.push(i) } break
            // Is not a date
            case '!date': if (!(i[w.key] instanceof Date)) { r.push(i) } break
            // Is an array
            case 'array': if (i[w.key] instanceof Array) { r.push(i) } break
            // Is not an array
            case '!array': if (!(i[w.key] instanceof Array)) { r.push(i) } break
            // Is an object
            case 'object': if (i[w.key] instanceof Object) { r.push(i) } break
            // Is not an object
            case '!object': if (!(i[w.key] instanceof Object)) { r.push(i) } break
          }
        })
        final.set(r)
      })
      return final
    }
  }
}