namespace libjs {

  export function string(str: string | number) {
    return new strings(str)
  }

  export class strings {
    protected _string: string

    public constructor(str: string | number) {
      this._string = str.toString()
    }

    public toString() {
      return this._string
    }

    public toNumber() {
      this._string = this._string
        // Remove anything that isn't valid in a number
        .replace(/[^0-9-.]/g, '')
        // Remove all dashes unless it is the first character
        .replace(/(?!^)-/g, '')
        // Remove the last period if there is already one
        .replace(/(\..*)\.$/, '$1')
        // Remove all trailing periods
        .replace(/\.(?=.*\.)/g, '')
      return this
    }

    public commaSeparate() {
      this._string = this._string.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
      return this
    }

    public format(format: string) {
      let str = ''
      let f = 0, n = 0
      while (f < format.length && n < this._string.length) {
        let fmt = format[f], num = this._string[n]
        if (fmt == '#') {
          str += num ? num : ''
          n++ , f++
        } else {
          str += fmt ? fmt : ''
          f++
        }
      }
      this._string = str
    }
  }

  // libjs.register(
  //   class toNumber extends component {

  //     public created() {
  //       this.elements = document.querySelectorAll('.number') as NodeListOf<HTMLElement>;
  //       for (let element of this.htmlElements) {
  //         if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
  //           this.minlen(element.value, element)
  //           this.format(element.value, element)
  //         }
  //       }
  //     }

  //     // Handle the input event
  //     public input(value: string, element: HTMLInputElement | HTMLTextAreaElement) {
  //       this.format(value, element)
  //     }

  //     // Handle the blur event
  //     public blur(value: string, element: HTMLInputElement | HTMLTextAreaElement) {
  //       this.minlen(value, element)
  //       this.format(value, element)
  //     }

  //     public minlen(value: string, element: HTMLInputElement | HTMLTextAreaElement) {
  //       let val = string(value).toNumber()
  //       let minlen = parseInt(element.getAttribute('minlen'))
  //       minlen != NaN && val.toString().length < minlen ? val = string(
  //         Array(Math.abs(val.toString().length - minlen)).fill('0').concat(val.toString().split('')).join('')
  //       ) : null
  //       element.value = val.toString()
  //     }

  //     private format(value: string, element: HTMLInputElement | HTMLTextAreaElement) {
  //       let val = string(value).toNumber()
  //       let cur = parseFloat(val.toString())
  //       let max = parseFloat(element.getAttribute('max'))
  //       let min = parseFloat(element.getAttribute('min'))
  //       let maxlen = parseInt(element.getAttribute('maxlen'))
  //       maxlen != NaN && val.toString().length > maxlen ? string(val.toString().substr(0, maxlen)) : null
  //       max != NaN && cur > max ? val = string(max).toNumber() : null
  //       min != NaN && cur < min ? val = string(min).toNumber() : null
  //       if (element.hasAttribute('comma-separate') && element.getAttribute('comma-separate') == 'true') {
  //         val.commaSeparate()
  //       }
  //       if (element.hasAttribute('format')) {
  //         val.format(element.getAttribute('format'))
  //       }
  //       element.value = val.toString()
  //     }
  //   }
  // )
}