namespace libjs {
  export abstract class component {

    protected _elements: HTMLElement[] = []

    public get htmlElements(): HTMLElement[] {
      return this._elements
    }

    /**
     * Sets the list of elementss
     *
     * @memberof component
     */
    public set elements(items: NodeListOf<HTMLElement>) {
      for (let el of items) { this._elements.push(el) }
    }

    /**
     * Attach one or more html elements to the component
     *
     * @param {string} selector
     * @memberof component
     */
    public addElement(selector: string) {
      let elements = document.querySelectorAll(selector) as NodeListOf<HTMLElement>
      for (let element of elements) {
        this._elements.push(element)
        this.initElement(element)
      }
    }

    /**
     * Initialize the needed features of the component
     *
     * @memberof component
     */
    public init() {
      if (typeof document !== 'undefined') {
        this._elements.forEach(el => {
          this.initElement(el)
        })
      }
    }

    public initElement(el: HTMLElement) {
      this.initKeyboardEvents(el)
      this.initMouseEvents(el)
      this.initFormEvents(el)
    }

    /**
     * Add keyboard event listeners
     *
     * @private
     * @memberof component
     */
    private initKeyboardEvents(el: HTMLElement) {
      typeof this['keyup'] == 'function' && el.addEventListener('keyup', (e: KeyboardEvent) => { this['keyup'](this, <any>e.currentTarget, e) })
      typeof this['keydown'] == 'function' && el.addEventListener('keydown', (e: KeyboardEvent) => { this['keydown'](this, <any>e.currentTarget, e) })
      typeof this['keypress'] == 'function' && el.addEventListener('keypress', (e: KeyboardEvent) => { this['keypress'](this, <any>e.currentTarget, e) })
    }

    /**
     * Add mouse event listeners
     *
     * @private
     * @param {HTMLElement} el
     * @memberof component
     */
    private initMouseEvents(el: HTMLElement) {
      typeof this['click'] == 'function' && el.addEventListener('click', (e: MouseEvent) => { this['click'](this, e) })
      typeof this['dblclick'] == 'function' && el.addEventListener('dblclick', (e: MouseEvent) => { this['dblclick'](this, e) })
      typeof this['contextmenu'] == 'function' && el.addEventListener('contextmenu', (e: MouseEvent) => { this['contextmenu'](this, e) })
      typeof this['mousedown'] == 'function' && el.addEventListener('mousedown', (e: MouseEvent) => { this['mousedown'](this, e) })
      typeof this['mouseup'] == 'function' && el.addEventListener('mouseup', (e: MouseEvent) => { this['mouseup'](this, e) })
      typeof this['mouseenter'] == 'function' && el.addEventListener('mouseenter', (e: MouseEvent) => { this['mouseenter'](this, e) })
      typeof this['mouseleave'] == 'function' && el.addEventListener('mouseleave', (e: MouseEvent) => { this['mouseleave'](this, e) })
      typeof this['mousemove'] == 'function' && el.addEventListener('mousemove', (e: MouseEvent) => { this['mousemove'](this, e) })
      typeof this['mouseover'] == 'function' && el.addEventListener('mouseover', (e: MouseEvent) => { this['mouseover'](this, e) })
      typeof this['mouseout'] == 'function' && el.addEventListener('mouseout', (e: MouseEvent) => { this['mouseout'](this, e) })
    }

    /**
     * Add form event listeners
     *
     * @private
     * @param {HTMLElement} el
     * @memberof component
     */
    private initFormEvents(el: HTMLElement) {
      typeof this['blur'] == 'function' && el.addEventListener('blur', e => { this['blur'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['focus'] == 'function' && el.addEventListener('focus', e => { this['focus'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['focusin'] == 'function' && el.addEventListener('focusin', e => { this['focusin'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['focusout'] == 'function' && el.addEventListener('focusout', e => { this['focusout'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['change'] == 'function' && el.addEventListener('change', e => { this['change'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['input'] == 'function' && el.addEventListener('input', e => { this['input'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['invalid'] == 'function' && el.addEventListener('invalid', e => { this['invalid'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['reset'] == 'function' && el.addEventListener('reset', e => { this['reset'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['search'] == 'function' && el.addEventListener('search', e => { this['search'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['select'] == 'function' && el.addEventListener('select', e => { this['select'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
      typeof this['submit'] == 'function' && el.addEventListener('submit', e => { this['submit'](this, (<HTMLFormElement>e.currentTarget).value, e.currentTarget) })
    }
  }
}